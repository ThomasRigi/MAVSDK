// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.

#include "{{ plugin_name.lower_snake_case }}/{{ plugin_name.lower_snake_case }}.grpc.pb.h"
#include "plugins/{{ plugin_name.lower_snake_case }}/{{ plugin_name.lower_snake_case }}.h"

#include "log.h"

namespace {{ package.lower_snake_case.split('.')[0] }} {
namespace backend {

template<typename {{ plugin_name.upper_camel_case }} = {{ plugin_name.upper_camel_case }}>
class {{ plugin_name.upper_camel_case }}ServiceImpl final : public rpc::{{ plugin_name.lower_snake_case }}::{{ plugin_name.upper_camel_case }}Service::Service {
public:
    {{ plugin_name.upper_camel_case }}ServiceImpl({{ plugin_name.upper_camel_case }}& {{ plugin_name.lower_snake_case }}) : _{{ plugin_name.lower_snake_case }}({{ plugin_name.lower_snake_case }}) {}

{% if has_result %}
    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::{{ plugin_name.upper_camel_case }}::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_{{ plugin_name.lower_snake_case }}_result = new rpc::{{ plugin_name.lower_snake_case }}::{{ plugin_name.upper_camel_case }}Result();
        rpc_{{ plugin_name.lower_snake_case }}_result->set_result(rpc_result);
        rpc_{{ plugin_name.lower_snake_case }}_result->set_result_str(mavsdk::{{ plugin_name.upper_camel_case }}::result_str(result));

        response->set_allocated_action_result(rpc_{{ plugin_name.lower_snake_case }}_result);
    }
{% endif %}

{% for enum in enums -%}
{{ indent(enum, 1) }}

{% endfor -%}

{% for struct in structs -%}
{{ indent(struct, 1) }}

{% endfor -%}

{% for method in methods -%}
{{ indent(method, 1) }}

{% endfor -%}

private:
    {{ plugin_name.upper_camel_case }} &_{{ plugin_name.lower_snake_case }};
};

} // namespace backend
} // namespace {{ package.lower_snake_case.split('.')[0] }}
