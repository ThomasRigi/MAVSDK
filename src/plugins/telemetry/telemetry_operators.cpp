// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/telemetry/telemetry.proto)

#include "plugins/telemetry/telemetry_operators.h"

#include <cmath>
#include <limits>

namespace mavsdk {

bool operator==(const Telemetry::Position& lhs, const Telemetry::Position& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Position const& position)
{
    return str << position;
}


bool operator==(const Telemetry::Quaternion& lhs, const Telemetry::Quaternion& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Quaternion const& quaternion)
{
    return str << quaternion;
}


bool operator==(const Telemetry::EulerAngle& lhs, const Telemetry::EulerAngle& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::EulerAngle const& euler_angle)
{
    return str << euler_angle;
}


bool operator==(const Telemetry::AngularVelocityBody& lhs, const Telemetry::AngularVelocityBody& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::AngularVelocityBody const& angular_velocity_body)
{
    return str << angular_velocity_body;
}


bool operator==(const Telemetry::SpeedNed& lhs, const Telemetry::SpeedNed& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::SpeedNed const& speed_ned)
{
    return str << speed_ned;
}


bool operator==(const Telemetry::GpsInfo& lhs, const Telemetry::GpsInfo& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::GpsInfo const& gps_info)
{
    return str << gps_info;
}


bool operator==(const Telemetry::Battery& lhs, const Telemetry::Battery& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Battery const& battery)
{
    return str << battery;
}


bool operator==(const Telemetry::Health& lhs, const Telemetry::Health& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Health const& health)
{
    return str << health;
}


bool operator==(const Telemetry::RcStatus& lhs, const Telemetry::RcStatus& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::RcStatus const& rc_status)
{
    return str << rc_status;
}


bool operator==(const Telemetry::StatusText& lhs, const Telemetry::StatusText& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::StatusText const& status_text)
{
    return str << status_text;
}


bool operator==(const Telemetry::ActuatorControlTarget& lhs, const Telemetry::ActuatorControlTarget& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::ActuatorControlTarget const& actuator_control_target)
{
    return str << actuator_control_target;
}


bool operator==(const Telemetry::ActuatorOutputStatus& lhs, const Telemetry::ActuatorOutputStatus& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::ActuatorOutputStatus const& actuator_output_status)
{
    return str << actuator_output_status;
}


bool operator==(const Telemetry::Covariance& lhs, const Telemetry::Covariance& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Covariance const& covariance)
{
    return str << covariance;
}


bool operator==(const Telemetry::VelocityBody& lhs, const Telemetry::VelocityBody& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::VelocityBody const& velocity_body)
{
    return str << velocity_body;
}


bool operator==(const Telemetry::PositionBody& lhs, const Telemetry::PositionBody& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::PositionBody const& position_body)
{
    return str << position_body;
}


bool operator==(const Telemetry::Odometry& lhs, const Telemetry::Odometry& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Odometry const& odometry)
{
    return str << odometry;
}


bool operator==(const Telemetry::PositionNed& lhs, const Telemetry::PositionNed& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::PositionNed const& position_ned)
{
    return str << position_ned;
}


bool operator==(const Telemetry::VelocityNed& lhs, const Telemetry::VelocityNed& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::VelocityNed const& velocity_ned)
{
    return str << velocity_ned;
}


bool operator==(const Telemetry::PositionVelocityNed& lhs, const Telemetry::PositionVelocityNed& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::PositionVelocityNed const& position_velocity_ned)
{
    return str << position_velocity_ned;
}


bool operator==(const Telemetry::GroundTruth& lhs, const Telemetry::GroundTruth& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::GroundTruth const& ground_truth)
{
    return str << ground_truth;
}


bool operator==(const Telemetry::FixedwingMetrics& lhs, const Telemetry::FixedwingMetrics& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::FixedwingMetrics const& fixedwing_metrics)
{
    return str << fixedwing_metrics;
}


bool operator==(const Telemetry::AccelerationFrd& lhs, const Telemetry::AccelerationFrd& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::AccelerationFrd const& acceleration_frd)
{
    return str << acceleration_frd;
}


bool operator==(const Telemetry::AngularVelocityFrd& lhs, const Telemetry::AngularVelocityFrd& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::AngularVelocityFrd const& angular_velocity_frd)
{
    return str << angular_velocity_frd;
}


bool operator==(const Telemetry::MagneticFieldFrd& lhs, const Telemetry::MagneticFieldFrd& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::MagneticFieldFrd const& magnetic_field_frd)
{
    return str << magnetic_field_frd;
}


bool operator==(const Telemetry::Imu& lhs, const Telemetry::Imu& rhs)
{
    return lhs == rhs;
}

std::ostream& operator<<(std::ostream& str, Telemetry::Imu const& imu)
{
    return str << imu;
}






std::ostream& operator<<(std::ostream& str, Telemetry::FixType const& fix_type)
{
    return str << fix_type;
}

std::ostream& operator<<(std::ostream& str, Telemetry::FlightMode const& flight_mode)
{
    return str << flight_mode;
}

std::ostream& operator<<(std::ostream& str, Telemetry::LandedState const& landed_state)
{
    return str << landed_state;
}

} // namespace mavsdk